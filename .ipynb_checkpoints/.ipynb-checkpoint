{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    " # Table of Contents\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import defaultdict,Counter, namedtuple\n",
    "from operator import itemgetter, attrgetter\n",
    "from urllib.request import Request, urlopen\n",
    "import json\n",
    "import pandas as pd\n",
    "import shlex\n",
    "import json\n",
    "from IPython.display import display, Javascript\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "api = 'http://127.0.0.1:8000/pdatas/'\n",
    "\n",
    "json_obj = urlopen(api)\n",
    "pdata = json.load(json_obj)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = filter(lambda x:x['insect'] == \"Bombus rufocinctus\", pdata)\n",
    "x = list(y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({'37.915': 161, '37.88588': 51, '39.37726': 4, '47.96427117': 2, '47.97031627': 2, '42.70929': 1, '42.67807': 1, '47.91342782': 1, '47.96734969': 1, '47.96492885': 1, '47.96478892': 1, '47.30184': 1})\n",
      "Counter({'-119.262': 161, '-119.257': 51, '-105.8006': 4, '-99.00106265': 2, '-98.99707456': 2, '-88.23171': 1, '-88.2762': 1, '-99.03414694': 1, '-98.99697661': 1, '-98.99932748': 1, '-98.99795614': 1, '-97.58368': 1})\n"
     ]
    }
   ],
   "source": [
    "lat = Counter(k['latitude'] for k in x)\n",
    "long = Counter(k['longitude'] for k in x)\n",
    "\n",
    "\n",
    "print(lat)\n",
    "print(long)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "latlist = []\n",
    "longlist = []\n",
    "count = []\n",
    "for k in lat:\n",
    "    if k not in latlist:\n",
    "        latlist.append(k)\n",
    "        \n",
    "for k in long:\n",
    "    if k not in longlist:\n",
    "        longlist.append(k)\n",
    "        \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({'Pedicularis groenlandica': 161, 'Pedicularis attollens': 51, 'Pedicularis crenulata': 4, 'Amorpha canescens': 2, 'Dalea purpurea': 2, 'Asclepias syriaca': 1, 'Malus sylvestris': 1, 'Bromus inermis': 1, 'Lactuca tatarica': 1, 'Spiraea alba': 1, 'Symphoricarpos occidentalis': 1, 'Oligoneuron rigidum': 1})\n"
     ]
    }
   ],
   "source": [
    "p = Counter(k['plant'] for k in x)\n",
    "print(p)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Asclepias syriaca\n",
      "Malus sylvestris\n",
      "Pedicularis crenulata\n",
      "Pedicularis attollens\n",
      "Pedicularis groenlandica\n",
      "Bromus inermis\n",
      "Amorpha canescens\n",
      "Lactuca tatarica\n",
      "Spiraea alba\n",
      "Dalea purpurea\n",
      "Symphoricarpos occidentalis\n",
      "Oligoneuron rigidum\n",
      "['Asclepias syriaca', 'Malus sylvestris', 'Pedicularis crenulata', 'Pedicularis attollens', 'Pedicularis groenlandica', 'Bromus inermis', 'Amorpha canescens', 'Lactuca tatarica', 'Spiraea alba', 'Dalea purpurea', 'Symphoricarpos occidentalis', 'Oligoneuron rigidum']\n"
     ]
    }
   ],
   "source": [
    "i = []\n",
    "for k in p:\n",
    "    if k not in i:\n",
    "        i.append(k)\n",
    "        print(k)\n",
    "\n",
    "print(i)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>latitude</th>\n",
       "      <th>longitude</th>\n",
       "      <th>plant</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>42.70929</td>\n",
       "      <td>-88.23171</td>\n",
       "      <td>Asclepias syriaca</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>42.67807</td>\n",
       "      <td>-88.2762</td>\n",
       "      <td>Malus sylvestris</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>39.37726</td>\n",
       "      <td>-105.8006</td>\n",
       "      <td>Pedicularis crenulata</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37.88588</td>\n",
       "      <td>-119.257</td>\n",
       "      <td>Pedicularis attollens</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>37.915</td>\n",
       "      <td>-119.262</td>\n",
       "      <td>Pedicularis groenlandica</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   latitude  longitude                     plant\n",
       "0  42.70929  -88.23171         Asclepias syriaca\n",
       "1  42.67807   -88.2762          Malus sylvestris\n",
       "2  39.37726  -105.8006     Pedicularis crenulata\n",
       "3  37.88588   -119.257     Pedicularis attollens\n",
       "4    37.915   -119.262  Pedicularis groenlandica"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_counters = pd.DataFrame(\n",
    "    {\n",
    "     'latitude' : latlist,\n",
    "     'longitude' : longlist,\n",
    "        'plant': i\n",
    "    })\n",
    "df_counters.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[['42.70929', '-88.23171'], ['42.67807', '-88.2762'], ['39.37726', '-105.8006'], ['37.88588', '-119.257'], ['37.915', '-119.262'], ['47.91342782', '-99.03414694'], ['47.96734969', '-98.99697661'], ['47.96427117', '-99.00106265'], ['47.96492885', '-98.99932748'], ['47.97031627', '-98.99707456'], ['47.96478892', '-98.99795614'], ['47.30184', '-97.58368']]\n",
      "[42.67807, -88.2762]\n"
     ]
    }
   ],
   "source": [
    "locations = df_counters[['latitude','longitude']]\n",
    "locationlist=locations.values.tolist()\n",
    "len(locationlist)\n",
    "print(locationlist)\n",
    "newlist = []\n",
    "for k in locationlist:\n",
    "    j = [float(i) for i in k]\n",
    "    if j not in newlist:\n",
    "        newlist.append(j)\n",
    "print(newlist[1])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "import folium\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div style=\"width:100%;\"><div style=\"position:relative;width:100%;height:0;padding-bottom:60%;\"><iframe src=\"data:text/html;charset=utf-8;base64,\" style=\"position:absolute;width:100%;height:100%;left:0;top:0;border:none !important;\" allowfullscreen webkitallowfullscreen mozallowfullscreen></iframe></div></div>"
      ],
      "text/plain": [
       "<folium.folium.Map at 0x118a29eb8>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "map = folium.Map(location=[42.70929, -88.23171], zoom_start=5,     tiles='Stamen Terrain'\n",
    ")\n",
    "for point in range(0, len(locationlist)):\n",
    "    folium.Marker(newlist[point], popup=df_counters['plant'][point]).add_to(map)\n",
    "map"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "p.values()\n",
    "count = p.values()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 1, 4, 51, 161, 1, 2, 1, 1, 2, 1, 1]\n"
     ]
    }
   ],
   "source": [
    "j = []\n",
    "for k in count:\n",
    "    j.append(k)\n",
    "print(j)        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "def chartjs(chartType, data, options={}, width=\"700px\", height=\"400px\"):\n",
    "    \"\"\" Custom iphython extension allowing chartjs visualizations\n",
    "    \n",
    "    Usage:\n",
    "        chartjs(chartType, data, options, width=1000, height=400)\n",
    "    \n",
    "    Args:\n",
    "        chartType: one of the supported chart type options (line, bar, radar, polarArea, pie, doughnut)\n",
    "        data: a python dictionary with datasets to be rapresented and related visualization settings, as expected \n",
    "              by chart js (see data parameter in http://www.chartjs.org/docs/)\n",
    "        options: defaults {}; a python dictionary with additional graph options, as expected \n",
    "              by chart js (see options parameter in http://www.chartjs.org/docs/)\n",
    "        width: default 700px\n",
    "        height: default 400px\n",
    "        \n",
    "        NB. data and options structure depends on the chartType\n",
    "    \"\"\"\n",
    "    display(\n",
    "        Javascript(\"\"\"\n",
    "            require(['https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js'], function(chartjs){\n",
    "                var chartType=\"%s\";\n",
    "                var data=%s;\n",
    "                var options=%s;\n",
    "                var width=\"%s\";\n",
    "                var height=\"%s\";\n",
    "                \n",
    "                element.append('<canvas width=\"' + width + '\" height=\"' + height + '\">s</canvas>');\n",
    "                var ctx = element.children()[0].getContext(\"2d\");\n",
    "                \n",
    "                switch(chartType.toLowerCase()) {\n",
    "                    \n",
    "                    case \"line\":\n",
    "                        var myChart = new Chart(ctx).Line(data, options);\n",
    "                        break;\n",
    "                    case \"bar\":\n",
    "                        var myChart = new Chart(ctx).Bar(data, options);\n",
    "                        break;\n",
    "                    case \"radar\":\n",
    "                        var myChart = new Chart(ctx).Radar(data, options);\n",
    "                        break;\n",
    "                    case \"polarArea\":\n",
    "                        var myChart = new Chart(ctx).PolarArea(data, options);\n",
    "                        break;\n",
    "                    case \"pie\":\n",
    "                        var myChart = new Chart(ctx).Pie(data, options);\n",
    "                        break;\n",
    "                    case \"doughnut\":\n",
    "                        var myChart = new Chart(ctx).Doughnut(data, options);\n",
    "                        break;\n",
    "                }\n",
    "            });\n",
    "            \"\"\" % (chartType, json.dumps(data), json.dumps(options), width, height)\n",
    "        )\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/javascript": [
       "\n",
       "            require(['https://cdnjs.cloudflare.com/ajax/libs/Chart.js/1.0.2/Chart.min.js'], function(chartjs){\n",
       "                var chartType=\"bar\";\n",
       "                var data={\"labels\": [\"Asclepias syriaca\", \"Malus sylvestris\", \"Pedicularis crenulata\", \"Pedicularis attollens\", \"Pedicularis groenlandica\", \"Bromus inermis\", \"Amorpha canescens\", \"Lactuca tatarica\", \"Spiraea alba\", \"Dalea purpurea\", \"Symphoricarpos occidentalis\", \"Oligoneuron rigidum\"], \"datasets\": [{\"label\": \"Sample dataset\", \"fillColor\": \"rgba(151,187,205,0.2)\", \"strokeColor\": \"rgba(151,187,205,1)\", \"pointColor\": \"rgba(151,187,205,1)\", \"pointStrokeColor\": \"#fff\", \"pointHighlightFill\": \"#fff\", \"pointHighlightStroke\": \"rgba(151,187,205,1)\", \"data\": [1, 1, 4, 51, 161, 1, 2, 1, 1, 2, 1, 1]}]};\n",
       "                var options={};\n",
       "                var width=\"700px\";\n",
       "                var height=\"400px\";\n",
       "                \n",
       "                element.append('<canvas width=\"' + width + '\" height=\"' + height + '\">s</canvas>');\n",
       "                var ctx = element.children()[0].getContext(\"2d\");\n",
       "                \n",
       "                switch(chartType.toLowerCase()) {\n",
       "                    \n",
       "                    case \"line\":\n",
       "                        var myChart = new Chart(ctx).Line(data, options);\n",
       "                        break;\n",
       "                    case \"bar\":\n",
       "                        var myChart = new Chart(ctx).Bar(data, options);\n",
       "                        break;\n",
       "                    case \"radar\":\n",
       "                        var myChart = new Chart(ctx).Radar(data, options);\n",
       "                        break;\n",
       "                    case \"polarArea\":\n",
       "                        var myChart = new Chart(ctx).PolarArea(data, options);\n",
       "                        break;\n",
       "                    case \"pie\":\n",
       "                        var myChart = new Chart(ctx).Pie(data, options);\n",
       "                        break;\n",
       "                    case \"doughnut\":\n",
       "                        var myChart = new Chart(ctx).Doughnut(data, options);\n",
       "                        break;\n",
       "                }\n",
       "            });\n",
       "            "
      ],
      "text/plain": [
       "<IPython.core.display.Javascript object>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Sample extract from an IPython notebook:\n",
    "\n",
    "# %run chartjs-ipython.py\n",
    "\n",
    "data = {\n",
    "    \"labels\": i,\n",
    "    \"datasets\": [\n",
    "        {\n",
    "            \"label\": \"Sample dataset\",\n",
    "            \"fillColor\": \"rgba(151,187,205,0.2)\",\n",
    "            \"strokeColor\": \"rgba(151,187,205,1)\",\n",
    "            \"pointColor\": \"rgba(151,187,205,1)\",\n",
    "            \"pointStrokeColor\": \"#fff\",\n",
    "            \"pointHighlightFill\": \"#fff\",\n",
    "            \"pointHighlightStroke\": \"rgba(151,187,205,1)\",\n",
    "            \"data\": j\n",
    "        }\n",
    "]}\n",
    "\n",
    "chartjs(\"bar\", data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
